========================================================1==========================================================================
1. Try with Finally -- Do you know about the new feature in Java7 try with resources block.What was the need to this enhancements in java. Which kind of resources are these. If in case when there is exception in both try block and while closing the resource which exception will be propagated. How can we get the not propagated exceptions. 

if you are writing the finally block yourself and both your try and finally block throw exception then the exception from try block is supressed.

While on the other hand if you are using try-with-resources statement and exception is thrown by both try block and try-with-resources statement then in this case the exception from try-with-resources statement is suppressed.

Suppressed Exceptions

An exception can be thrown from the block of code associated with the try-with-resources statement. In the example writeToFileZipFileContents, an exception can be thrown from the try block, and up to two exceptions can be thrown from the try-with-resources statement when it tries to close the ZipFile and BufferedWriter objects. If an exception is thrown from the try block and one or more exceptions are thrown from the try-with-resources statement, then those exceptions thrown from the try-with-resources statement are suppressed, and the exception thrown by the block is the one that is thrown by the writeToFileZipFileContents method. You can retrieve these suppressed exceptions by calling the Throwable.getSuppressed method from the exception thrown by the try block.Throwable[] java.lang.Throwable.getSuppressed()


===============================================================2=========================================================================================
Can we have a abstract class without any abstract method.

If Yes, then why. Any example. HTTPServlet. 

Yes we can have an abstract class without Abstract Methods as both are independent concepts. Declaring a class abstract means that it can not be instantiated on its own and can only be sub classed. Declaring a method abstract means that Method will be defined in the subclass.

https://stackoverflow.com/questions/4811678/defining-an-abstract-class-without-any-abstract-methods
=================================================================3=======================================================================================
In Java 8, now the interface can have concrete method implementations as default implementations. 

public interface TestJava8nterface1 {

	public void existingMethod();
	
	default public void newMethod(){
		System.out.println("Default Method from TestJava8Interface1");
	}
}


public interface TestJava8Interface2 {
	
	default public void newMethod(){
		System.out.println("Default Method from TestJava8Interface2");
	}

}



public class ClassA implements TestJava8nterface1, TestJava8Interface2{

	@Override
	public void existingMethod() {
		// TODO Auto-generated method stub
		
	}
}



public class TestMain {
	public static void main(String[] args) {
		
		TestJava8nterface1 obj1 = new ClassA();
		obj1.newMethod();
	}

}

which default method will get called. In case of error how can we avoid this situation.
=========================================================================================================================================================
	